<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>经典算法</title>
      <link href="/post/52bf2cec.html"/>
      <url>/post/52bf2cec.html</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>&emsp;&emsp;冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列,一次比较两个元素,如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换,也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。  </p><p>&emsp;&emsp;基本的冒泡排序实现：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bubble_sort</span>(<span class="params">nums</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 我们设置 swapped 为 True 以确保循环在至少发生一次交换时继续运行</span></span><br><span class="line">    swapped = <span class="literal">True</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 我们要遍历数组的全部元素,因此 outer loop 从 0 到 数组的长度 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):  </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果没有发生任何交换,那么数组已经排序完成,我们可以停止循环</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> swapped:  </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 我们将 swapped 设置为 False,假定本次循环不会发生交换         </span></span><br><span class="line">        swapped = <span class="literal">False</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 现在我们以Similar的方式在当前的未排序区间内进行遍历 </span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums) - i - <span class="number">1</span>):  </span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 如果前面的元素大于后面的元素,我们交换它们</span></span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j + <span class="number">1</span>]:  </span><br><span class="line">                nums[j], nums[j + <span class="number">1</span>] = nums[j + <span class="number">1</span>], nums[j] </span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 我们发生了交换,所以设置 swapped 为 True 以确保我们在下次循环中继续遍历</span></span><br><span class="line">                swapped = <span class="literal">True</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试数组                </span></span><br><span class="line">nums = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>] </span><br><span class="line">bubble_sort(nums) </span><br><span class="line"><span class="built_in">print</span>(nums) <span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;时间复杂度 O(n^2), 空间复杂度 O(1)。冒泡排序的优点是简单,稳定,空间效率高。缺点是时间效率不高,并不实用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Claude回复</title>
      <link href="/post/24531ddb.html"/>
      <url>/post/24531ddb.html</url>
      
        <content type="html"><![CDATA[<h1 id="Claude回复"><a href="#Claude回复" class="headerlink" title="Claude回复"></a>Claude回复</h1><h2 id="23-4-17"><a href="#23-4-17" class="headerlink" title="23.4.17"></a>23.4.17</h2><ul><li><p>&emsp;这萧瑟的天，浸染着岁月静好的颜色，却也冲淡了我们曾携手拾起的那片金黄。如今我独行在这道道飘零，为了一眼青涩的影子，为了一句朦胧的笑语，唏嘘不已。回首那少年，却只剩零散记忆，与漫天的落叶一起，飘荡于天际。</p></li><li><p>&emsp;月华萧疏，风势蕴藉，星河黯淡，天亦有情。孤灯摇黄，江湖去来，金玉艳歌未曾歇，望窗外，情怯似秋千，零落成土。闭门无眠，往事涌现， 故人泪干，绝期再续难。风掠庭树，欲将念捎， 刀山烈火，烹心焦肝处。人来来往往，深情到何方。红尘似梦中，眠不待醒，夜夜思君，泪痕销魂处。小巷幽冥，影徘徊， 情难平兮，生死漫漫。红灯嬉笑处，歌楼起舞， 独上轩阁，望秋夜，想君容颜，泪如雨。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 语文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python库</title>
      <link href="/post/fa288682.html"/>
      <url>/post/fa288682.html</url>
      
        <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><p>&emsp;&emsp;NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p><p>&emsp;&emsp;NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p><ul><li>一个强大的N维数组对象 ndarray</li><li>广播功能函数</li><li>整合 C/C++/Fortran 代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><p>&emsp;&emsp;<strong>NumPy</strong> 通常与 <strong>SciPy</strong>（Scientific Python）和 <strong>Matplotlib</strong>（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。</p><p>&emsp;&emsp;SciPy 是一个开源的 Python 算法库和数学工具包。SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。</p><p>&emsp;&emsp;Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。</p><h2 id="Ndarray-对象"><a href="#Ndarray-对象" class="headerlink" title="Ndarray 对象"></a>Ndarray 对象</h2><p>&emsp;&emsp;NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p><p>&emsp;&emsp;ndarray 对象是用于存放同类型元素的多维数组。ndarray 中的每个元素在内存中都有相同存储大小的区域。</p><p>ndarray 内部由以下内容组成：</p><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要”跨过”的字节数。</li></ul><p>ndarray 的内部结构:  </p><p><img src="https://www.runoob.com/wp-content/uploads/2018/10/ndarray.png" alt="img"></p><p>跨度可以是负数，这样会使数组在内存中后向移动，切片中 <strong>obj[::-1]</strong> 或 <strong>obj[:,::-1]</strong> 就是如此。</p><p>  <img src="/post/fa288682.htm/ndarray.png" alt="ndarray"></p><p>创建一个 ndarray 只需调用 NumPy 的 array 函数即可：  </p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br></pre></td></tr></table></figure></blockquote><p><strong>参数说明：</strong>  </p><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">object</td><td align="left">数组或嵌套的数列</td></tr><tr><td align="left">dtype</td><td align="left">数组元素的数据类型，可选</td></tr><tr><td align="left">copy</td><td align="left">对象是否需要复制，可选</td></tr><tr><td align="left">order</td><td align="left">创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td></tr><tr><td align="left">subok</td><td align="left">默认返回一个与基类类型一致的数组</td></tr><tr><td align="left">ndmin</td><td align="left">指定生成数组的最小维度</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例 1</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="comment">#  [1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实列2</span></span><br><span class="line"><span class="comment"># 多于一个维度  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([[<span class="number">1</span>,  <span class="number">2</span>],  [<span class="number">3</span>,  <span class="number">4</span>]])  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1  2] </span></span><br><span class="line"><span class="string"> [3  4]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实列3</span></span><br><span class="line"><span class="comment"># 最小维度  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], ndmin =  <span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;[[1 2 3 4 5]]&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例 4</span></span><br><span class="line"><span class="comment"># dtype 参数  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>], dtype = <span class="built_in">complex</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;[1.+0.j 2.+0.j 3.+0.j]&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据类型对象-dtype"><a href="#数据类型对象-dtype" class="headerlink" title="数据类型对象 (dtype)"></a>数据类型对象 (dtype)</h2><p>&emsp;&emsp;在**numpy.array(object, dtype = None,…)<strong>代码中，dtype实际上为</strong>numpy.dtype(object, align, copy)**对象，所需要参数：</p><ul><li>object - 要转换为的数据类型对象</li><li>align - 如果为 true，填充字段使其类似 C 的结构体。</li><li>copy - 复制 dtype 对象 ，如果为 false，则是对内置数据类型对象的引用</li></ul><p>&emsp;&emsp;传入的object参数可以为np.int或者.其他数据类型，亦或者’i4’等数据类型的缩写。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例1</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 使用标量类型</span></span><br><span class="line">dt = np.dtype(np.int32)</span><br><span class="line"><span class="built_in">print</span>(dt, <span class="built_in">type</span>(dt))</span><br><span class="line"><span class="comment"># int32  &lt;class &#x27;numpy.dtype[int32]&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例2</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># int8, int16, int32, int64 四种数据类型可以使用字符串 &#x27;i1&#x27;, &#x27;i2&#x27;,&#x27;i4&#x27;,&#x27;i8&#x27; 代替</span></span><br><span class="line">dt = np.dtype(<span class="string">&#x27;i4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dt)</span><br><span class="line">int32</span><br></pre></td></tr></table></figure><p>结构化数据类型略。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古诗文</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>古诗文鉴赏</p><h1 id="归去来兮辞"><a href="#归去来兮辞" class="headerlink" title="归去来兮辞"></a>归去来兮辞</h1><p>&emsp;&emsp;作者：陶渊明   朝代：魏晋</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文:"></a>原文:</h2><p>&emsp;余家贫，耕植不足以自给。幼稚盈室，瓶无储粟，生生所资，未见其术。亲故多劝余为长吏，脱然有怀，求之靡途。会有四方之事，诸侯以惠爱为德，家叔以余贫苦，遂见用于小邑。于时风波未静，心惮远役，彭泽去家百里，公田之利，足以为酒。故便求之。及少日，眷然有归欤之情。何则？质性自然，非矫厉所得。饥冻虽切，违己交病。尝从人事，皆口腹自役。于是怅然慷慨，深愧平生之志。犹望一稔，当敛裳宵逝。寻程氏妹丧于武昌，情在骏奔，自免去职。仲秋至冬，在官八十余日。因事顺心，命篇曰《归去来兮》。乙巳岁十一月也。</p><p>&emsp;归去来兮，田园将芜胡不归？既自以心为形役，奚惆怅而独悲？悟已往之不谏，知来者之可追。实迷途其未远，觉今是而昨非。舟遥遥以轻飏，风飘飘而吹衣。问征夫以前路，恨晨光之熹微。</p><p>&emsp;乃瞻衡宇，载欣载奔。僮仆欢迎，稚子候门。三径就荒，松菊犹存。携幼入室，有酒盈樽。引壶觞以自酌，眄庭柯以怡颜。倚南窗以寄傲，审容膝之易安。园日涉以成趣，门虽设而常关。策扶老以流憩，时矫首而遐观。云无心以出岫，鸟倦飞而知还。景翳翳以将入，抚孤松而盘桓。</p><p>&emsp;归去来兮，请息交以绝游。世与我而相违，复驾言兮焉求？悦亲戚之情话，乐琴书以消忧。农人告余以春及，将有事于西畴。或命巾车，或棹孤舟。既窈窕以寻壑，亦崎岖而经丘。木欣欣以向荣，泉涓涓而始流。善万物之得时，感吾生之行休。</p><p>&emsp;已矣乎！寓形宇内复几时？曷不委心任去留？胡为乎遑遑欲何之？富贵非吾愿，帝乡不可期。怀良辰以孤往，或植杖而耘耔。登东皋以舒啸，临清流而赋诗。聊乘化以归尽，乐夫天命复奚疑！</p><h2 id="译文"><a href="#译文" class="headerlink" title="译文:"></a>译文:</h2><p>&emsp;我家贫穷，种田不能够自给。孩子很多，米缸里没有存粮，维持生活所需的一切，没有办法解决。亲友大都劝我去做官，我心里也有这个念头，可是求官缺少门路。正赶上有奉使外出的官吏，地方大吏以爱惜人才为美德，叔父也因为我家境贫苦（替我设法），我就被委任到小县做官。那时社会上动荡不安，心里惧怕到远地当官。彭泽县离家一百里，公田收获的粮食，足够造酒饮用，所以就请求去那里。等到过了一些日子，便产生了留恋故园的怀乡感情。那是为什么？本性任其自然，这是勉强不得的；饥寒虽然来得急迫，但是违背本意去做官，身心都感痛苦。过去为官做事，都是为了吃饭而役使自己。于是惆怅感慨，深深有愧于平生的志愿。只再等上一年，便收拾行装连夜离去。不久，嫁到程家的妹妹在武昌去世，去吊丧的心情像骏马奔驰一样急迫，自己请求免去官职。自立秋第二个月到冬天，在职共八十多天。因辞官而顺遂了心愿，写了一篇文章，题目叫《归去来兮》。这时候正是乙巳年（晋安帝义熙元年）十一月。</p><p>&emsp;回家去吧！田园快要荒芜了，为什么不回去呢？既然自己使心为身所驱役，又何必怅惘而独自悲戚呢？认识到过去的错误已经不可挽回，知道未来的事还来得及补救。确实走入了迷途大概还不远，已觉悟到现在的做法是对的而曾经的行为是错的。船在水上轻轻飘荡，微风吹拂着衣裳。向行人打听前面的路，遗憾的是天刚刚放亮。</p><p>&emsp;刚刚看到自己简陋的家门，我心中欣喜，奔跑过去。童仆欢喜地前来迎接，孩子们守候在门前或院子里。院子里的小路快要荒芜了，松树菊花还长在那里；带着孩子们进了屋，美酒已经盛满了酒樽。我端起酒壶酒杯自斟自饮，观赏着庭树（使我）露出愉快的神色；倚着南窗寄托我的傲世之情，深知这狭小之地容易使我心安。每天（独自）在园中散步，成为乐趣,小园的门经常地关闭着；拄着拐杖走走歇歇，时时抬头望着远方（的天空）。白云自然而然地从山峰飘浮而出，倦飞的小鸟也知道飞回巢中；日光暗淡，即将落山，我流连不忍离去，手抚着孤松徘徊不已。</p><p>&emsp;回去吧！让我同外界断绝交游。他们的一切都跟我的志趣不合，还要驾车出去追求什么？跟亲戚朋友谈心使我愉悦，弹琴读书能使我忘记忧愁；农夫把春天到了的消息告诉了我，将要去西边的田地耕作。有时驾着有布篷的小车，有时划着一条小船，沿着幽深曲折的山谷，经过道路崎岖的山丘。树木欣欣向荣，泉水缓缓流动，（我）羡慕万物恰逢繁荣滋长的季节，感叹自己一生行将告终。</p><p>&emsp;算了吧！身体寄托在天地间还能有多少时候？为什么不随心所欲，听凭自然的生死？为什么心神不定，还想去什么地方？富贵不是我所求，升入仙界也没有希望。爱惜那良辰美景我独自去欣赏，要不就扶杖锄草耕种；登上东边山坡我放声长啸，傍着清清的溪流把诗歌吟唱；姑且顺随自然的变化，度到生命的尽头。乐天安命，还有什么可疑虑的呢？  </p><h1 id="水调歌头·明月几时有"><a href="#水调歌头·明月几时有" class="headerlink" title="水调歌头·明月几时有"></a>水调歌头·明月几时有</h1><p>&emsp;&emsp;作者：苏轼  朝代：宋  </p><h2 id="原文-1"><a href="#原文-1" class="headerlink" title="原文"></a>原文</h2><p>&emsp;&emsp;丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</p><p>&emsp;&emsp;明月几时有？把酒问青天。不知天上宫阙，今夕是何年。我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间。</p><p>&emsp;&emsp;转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。  </p><h2 id="译文-1"><a href="#译文-1" class="headerlink" title="译文"></a>译文</h2><p>&emsp;&emsp;丙辰年（公元1076年）的中秋节，通宵痛饮直至天明，大醉，趁兴写下这篇文章，同时抒发对弟弟子由的怀念之情。</p><p>&emsp;&emsp;像中秋佳节如此明月几时能有？我拿着酒杯遥问苍天。不知道高遥在上的宫阙，现在又是什么日子。我想凭借着风力回到天上去看一看，又担心美玉砌成的楼宇太高了，我经受不住寒冷。起身舞蹈玩赏着月光下自己清朗的影子，月宫哪里比得上人间烟火暖人心肠。  </p><p>&emsp;&emsp;月儿移动，转过了朱红色的楼阁，低低地挂在雕花的窗户上，照着没有睡意的人。明月不应该对人们有什么怨恨吧，可又为什么总是在人们离别之时才圆呢？人生本就有悲欢离合，月儿常有圆缺，这样的好事自古就难以两全。只希望这世上所有人的亲人都能平安健康长寿，即使相隔千里也能共赏明月。</p>]]></content>
      
      
      <categories>
          
          <category> 语文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古诗文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
